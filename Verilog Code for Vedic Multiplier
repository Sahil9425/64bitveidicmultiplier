//VEDIC 64 BIT MULTIPLIER
module vedic64(
    input [63:0]a,
    input [63:0]b,
    output wire [127:0]out
    );
    wire [63:0]w0;
    wire [63:0]w1;
    wire [63:0]w2;
    wire [63:0]w3;
    wire [31:0]temp1;
    wire [95:0]temp2;
    wire [95:0]temp3;
    wire [95:0]temp4;
    wire [63:0]w4;
    wire [95:0]w5;
    wire [95:0]w6;
    vedic32 u0(.a(a[31:0]),.b(b[31:0]),.c(w0[63:0]));
    vedic32 u1(.a(a[63:32]),.b(b[31:0]),.c(w1[63:0]));
    vedic32 u2(.a(a[31:0]),.b(b[63:32]),.c(w2[63:0]));
    vedic32 u3(.a(a[63:32]),.b(b[63:32]),.c(w3[63:0]));
    assign temp1={32'b0,w0[63:32]};
    _64bitadder u4(.a(temp1),.b(w1[63:0]),.s(w4));
    assign temp2={32'b0,w2[63:0]};
    assign temp3={w3[63:0],32'b0};
    _96bitadder u5(.a(temp2),.b(temp3),.s(w5));
    assign temp4={32'b0,w4[63:0]};
    _96bitadder u6(.a(temp4),.b(w5[95:0]),.s(w6));
    assign out[31:0]=w0[31:0];
    assign out[127:32]=w6[95:0];
                
endmodule

//VEDIC 32 BIT MULTIPLIER
module vedic32(
    input [31:0]a,
    input [31:0]b,
    output wire [63:0]c
    );
    wire [31:0]w0;
            wire [31:0]w1;
            wire [31:0]w2;
            wire [31:0]w3;
            wire [15:0]temp1;
            wire [47:0]temp2;
            wire [47:0]temp3;
            wire [47:0]temp4;
            wire [31:0]w4;
            wire [47:0]w5;
            wire [47:0]w6;
             vedic16 u0(.a(a[15:0]),.b(b[15:0]),.c(w0[31:0]));
             vedic16 u1(.a(a[31:16]),.b(b[15:0]),.c(w1[31:0]));
             vedic16 u2(.a(a[15:0]),.b(b[31:16]),.c(w2[31:0]));
             vedic16 u3(.a(a[31:16]),.b(b[31:16]),.c(w3[31:0]));
             assign temp1={16'b0,w0[31:16]};
             _32bitadder u4(.a(temp1),.b(w1[31:0]),.s(w4));
             assign temp2={16'b0,w2[31:0]};
             assign temp3={w3[31:0],16'b0};
             _48bitadder u5(.a(temp2),.b(temp3),.s(w5));
             assign temp4={16'b0,w4[31:0]};
             _48bitadder u6(.a(temp4),.b(w5[47:0]),.s(w6));
             assign c[15:0]=w0[15:0];
             assign c[63:16]=w6[47:0];
             
endmodule


//VEDIC 16 BIT MULTIPLIER
module vedic16(
    input [15:0]a,
    input [15:0]b,
    output wire[31:0]c
    );
    wire [15:0]w0;
        wire [15:0]w1;
        wire [15:0]w2;
        wire [15:0]w3;
        wire [7:0]temp1;
        wire [23:0]temp2;
        wire [23:0]temp3;
        wire [23:0]temp4;
        wire [15:0]w4;
        wire [23:0]w5;
        wire [23:0]w6;
        vedic8 u0(.a(a[7:0]),.b(b[7:0]),.out(w0[15:0]));
        vedic8 u1(.a(a[15:8]),.b(b[7:0]),.out(w1[15:0]));
        vedic8 u2(.a(a[7:0]),.b(b[15:8]),.out(w2[15:0]));
        vedic8 u3(.a(a[15:8]),.b(b[15:8]),.out(w3[15:0]));
        assign temp1={8'b0,w0[15:8]};
        _16bitadder u4(.a(w1[15:0]),.b(temp1),.s(w4));
        assign temp2={8'b0,w2[15:0]};
        assign temp3={w3[15:0],8'b0};
        _24bitadder u5(.a(temp2),.b(temp3),.s(w5));
        assign temp4={8'b0,w4[15:0]};
        _24bitadder u6(.a(temp4),.b(w5),.s(w6));
        assign c[7:0]=w0[7:0];
        assign c[31:8]=w6[23:0];            
endmodule


//VEDIC 8 BIT MULTIPLIER
module vedic8(
    input [7:0]a,
    input [7:0]b,
    output wire[15:0]out
    );
    wire [15:0]w0;
    wire [15:0]w1;
    wire [15:0]w2;
    wire [15:0]w3;
    wire [7:0]temp1;
    wire [11:0]temp2;
    wire [11:0]temp3;
    wire [11:0]temp4;
    wire [7:0]w4;
    wire [11:0]w5;
    wire [11:0]w6;
    vedic4 u0(.a(a[3:0]),.b(b[3:0]),.c(w0[15:0])); 
    vedic4 u1(.a(a[7:4]),.b(b[3:0]),.c(w1[15:0])); 
    vedic4 u2(.a(a[3:0]),.b(b[7:4]),.c(w2[15:0])); 
    vedic4 u3(.a(a[7:4]),.b(b[7:4]),.c(w3[15:0]));
    assign temp1={4'b0,w0[7:4]};
    _8bitadder u4(.a(temp1),.b(w1[7:0]),.s(w4));
    assign temp2={4'b0,w2[7:0]};
    assign temp3={w3[7:0],4'b0};
    _12bitadder u5(.a(temp2),.b(temp3),.s(w5));
    assign temp4={4'b0,w4[7:0]};
    _12bitadder u6(.a(temp4),.b(5),.s(w6));
    assign out[3:0]=w0[3:0];
    assign out[15:4]=w6[11:0];
       
endmodule


//VEDIC 4 BIT MULTIPLIER
module vedic4(
    input [3:0]a,
    input [3:0]b,
    output wire[7:0]c
    );
    wire [3:0]w0;
    wire [3:0]w1;
    wire [3:0]w2;
    wire [3:0]w3;
    wire [3:0]temp1;
    wire [5:0]temp2;
    wire [5:0]temp3;
    wire [5:0]temp4;
    wire [3:0]w4;
    wire [5:0]w5;
    wire [5:0]w6;
    
    vedic2_2 u1(.a(a[1:0]),.b(b[1:0]),.c(w0[3:0]));
    vedic2_2 u2(.a(a[3:2]),.b(b[1:0]),.c(w1[3:0]));
    vedic2_2 u3(.a(a[1:0]),.b(b[3:2]),.c(w2[3:0]));
    vedic2_2 u4(.a(a[3:2]),.b(b[3:2]),.c(w3[3:0]));
            assign temp1={2'b0,w0[3:2]};
                _4bitadder d1(.a(w1),.b(temp1),.s(w4));
    assign temp2={2'b0,w2[3:0]};
    assign temp3={w3[3:0],2'b0};
    _6bitadder d2(.a(temp2),.b(temp3),.s(w5));
       assign temp4={2'b0,w4[3:0]};
        _6bitadder d3(.a(temp4),.b(w5),.s(w6));
    assign c[1:0]=w0[1:0];
    assign c[7:2]=w6[5:0];
    
    
    
    
endmodule


//VEDIC 2 BIT MULTIPLIER
module vedic2_2(
    input [1:0]a,
    input [1:0]b,
    output wire [3:0]c
    );
    wire [3:0] temp;
    assign c[0]=a[0]&b[0];
    assign temp[0]=a[1]&b[0];
    assign temp[1]=a[0]&b[1];
    assign temp[2]=a[1]&b[1];
    hadder u1(.a(temp[0]),.b(temp[1]),.s(c[1]),.c(temp[3]));
    hadder u2(.a(temp[2]),.b(temp[3]),.s(c[2]),.c(c[3]));
    
endmodule
